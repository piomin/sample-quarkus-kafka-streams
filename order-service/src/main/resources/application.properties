quarkus.application.name = order-service

%prod.kafka.bootstrap.servers = ${KAFKA_URL}

quarkus.apicurio-registry.devservices.enabled = false
#mp.messaging.connector.smallrye-kafka.apicurio.registry.url = http://apicurioregistry-kafkasql.kafka.router-default.apps.qyt1tahi.eastus.aroapp.io/apis/registry/v2

mp.messaging.outgoing.orders-buy.connector = smallrye-kafka
mp.messaging.outgoing.orders-buy.topic = orders.buy
mp.messaging.outgoing.orders-buy.key.serializer = org.apache.kafka.common.serialization.LongSerializer
mp.messaging.outgoing.orders-buy.value.serializer = io.quarkus.kafka.client.serialization.ObjectMapperSerializer
#mp.messaging.outgoing.orders-buy.apicurio.registry.auto-register = true
#mp.messaging.outgoing.orders-buy.value.serializer = io.apicurio.registry.serde.avro.AvroKafkaSerializer

mp.messaging.outgoing.orders-sell.connector = smallrye-kafka
mp.messaging.outgoing.orders-sell.topic = orders.sell
mp.messaging.outgoing.orders-sell.key.serializer = org.apache.kafka.common.serialization.LongSerializer
mp.messaging.outgoing.orders-sell.value.serializer = io.quarkus.kafka.client.serialization.ObjectMapperSerializer
#mp.messaging.outgoing.orders-sell.apicurio.registry.auto-register = true
#mp.messaging.outgoing.orders-sell.value.serializer = io.apicurio.registry.serde.avro.AvroKafkaSerializer

mp.messaging.incoming.transactions.connector = smallrye-kafka
mp.messaging.incoming.transactions.topic = transactions
mp.messaging.incoming.transactions.value.deserializer = pl.piomin.samples.streams.order.model.deserializer.TransactionDeserializer

%test.quarkus.container-image.build = true
%test.quarkus.kubernetes.deploy = true
quarkus.container-image.build = true
quarkus.kubernetes.deploy = true
quarkus.kubernetes.deployment-target = openshift
quarkus.kubernetes-client.trust-certs = true
quarkus.openshift.env.vars.kafka-url = my-cluster-kafka-bootstrap.kafka:9092